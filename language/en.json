{
    "__lang_name__": "English",
    "banner_subtitle": "         üöÄ Termz Shell by Muhammad Zili",
    "prompt_prefix": "Termz",
    "welcome_message": "Welcome to Termz v1.1! Type 'help' for command list.",
    "running_on": "Running on",
    "announcement_title": "FEATURE ANNOUNCEMENT",
    "announcement_body": "Termz now supports multi-language! Try 'trm set language'",
    "help_title": "Available commands:",
    "help_nav_file": "--- Navigation & File ---",
    "help_ls": "List directory contents",
    "help_cd": "Change directory (supports '..' to go up)",
    "help_mkdir": "Create a new directory",
    "help_rm": "Remove a file",
    "help_rm_rf": "Remove a folder or file forcibly",
    "help_tre": "Edit file (uses host 'nano')",
    "help_git_clone": "Clone a repository from GitHub",
    "help_pkg_mgmt": "--- Package Management ---",
    "help_trm_change_repo": "Change package repository URL (interactive)",
    "help_trm_set_lang": "Change display language (New!)",
    "help_pkg_install": "Install package from repo",
    "help_pkg_remove": "Remove installed package",
    "help_pkg_update": "Update package list from repo",
    "help_pkg_upgrade": "Upgrade all installed packages",
    "help_trm_installed": "Show installed packages",
    "help_trm_search": "Search package in repo",
    "help_trm_run": "Run a command from installed package",
    "help_other": "--- Other ---",
    "help_clear": "Clear screen",
    "help_exit": "Exit Termz",
    "help_footer": "You can also run installed packages directly\nby typing: <package_name> [subcommand]",
    "access_denied": "‚ùå Error: Access denied.",
    "error_ls": "‚ùå Error ls",
    "dir_not_found": "‚ùå Error: Directory '{target_dir}' not found.",
    "cannot_go_up": "In sandbox root, cannot go up further.",
    "error_cd": "‚ùå Error cd",
    "dir_created": "‚úÖ Directory '{target_dir}' created.",
    "error_mkdir": "‚ùå Error mkdir",
    "cannot_delete_root": "‚ùå Error: Cannot delete home root directory.",
    "dir_deleted": "üóëÔ∏è  Directory '{target}' removed.",
    "file_deleted": "üóëÔ∏è  File '{target}' removed.",
    "not_found": "‚ùå Error: '{target}' not found.",
    "error_rm_rf": "‚ùå Error rm -rf",
    "is_dir_use_rf": "‚ùå Error: '{target}' is a directory. Use 'rm -rf' to remove.",
    "file_not_found": "‚ùå Error: File '{target}' not found.",
    "error_rm": "‚ùå Error rm",
    "nano_opening": "Opening {filename} with nano...",
    "nano_closed": "Nano closed.",
    "nano_not_found": "‚ùå Error: 'nano' is not installed on the host system.",
    "nano_required": "'tre' requires 'nano' to function.",
    "nano_error": "‚ùå Error running nano",
    "usage_git_clone": "Usage: git clone <repo_url> [optional_dir]",
    "cloning": "Cloning '{repo_url}' into '{target_dir}'...",
    "clone_success": "‚úÖ Clone complete.",
    "git_not_found": "‚ùå Error: 'git' is not installed on the host system.",
    "error_git_clone": "‚ùå Error git clone",
    "repo_change_title": "--- Change Repository ---",
    "current_repo": "Current repo",
    "repo_select_new": "Select new repo:",
    "repo_default": "Default Repo (GitHub)",
    "repo_mirror": "Mirror Repo (tinkrow.space)",
    "repo_custom": "Custom (Enter URL)",
    "repo_cancel": "Cancel",
    "repo_choice": "Choice [0-3]: ",
    "repo_custom_url": "Enter custom repo URL: ",
    "repo_url_empty": "URL empty, cancelled.",
    "repo_cancelled": "Repo change cancelled.",
    "repo_cmd_deprecated": "Command 'trm repo <url>' is deprecated.",
    "repo_cmd_use_interactive": "Use 'trm change repo' for interactive menu.",
    "lang_change_title": "--- Change Language ---",
    "lang_select_new": "Select new language:",
    "lang_choice": "Choice [0-{count}]: ",
    "lang_set_success": "‚úÖ Language changed to {lang_name}",
    "lang_set_fail": "‚ùå Failed to change language. File '{lang_code}.json' not found.",
    "lang_cancelled": "Language change cancelled.",
    "usage_pkg_install": "Usage: pkg install <package_name>",
    "usage_pkg_remove": "Usage: pkg remove <package_name>",
    "usage_trm_search": "Usage: trm search <keyword>",
    "usage_trm_run": "Usage: trm run <command> [subcommand]",
    "goodbye": "Goodbye üëã",
    "unknown_command": "Unknown command. Type 'help' for help.",
    "interrupted": "Interrupted. Type 'exit' to quit.",
    "generic_error": "Error",
    "pkg_creating_default_config": "Creating default config.json...",
    "pkg_config_corrupt": "‚ö†Ô∏è Warning: config.json file corrupt. Resetting to default.",
    "pkg_config_save_error": "‚ùå Error saving config.json: {e}",
    "pkg_repo_reset": "‚úÖ Repository reset to default:\n   {url}",
    "pkg_repo_changed": "‚úÖ Repository URL changed to:\n   {url}",
    "pkg_run_update": "   Run 'pkg update' to synchronize package list.",
    "pkg_installed_corrupt": "‚ö†Ô∏è Warning: installed.json file corrupt. Creating new file.",
    "pkg_cache_corrupt": "‚ö†Ô∏è Warning: repo_cache.json file corrupt. Creating new file.",
    "pkg_updating": "üîÑ Updating package list from {url}...",
    "pkg_mode_github": "   (Mode: GitHub API)",
    "pkg_github_api_error": "GitHub API returned HTTP {code}",
    "pkg_mode_mirror": "   (Mode: Simple Mirror)",
    "pkg_fetching_index": "   Fetching index: {url}",
    "pkg_mirror_api_error": "Simple Mirror returned HTTP {code} for index.json",
    "pkg_mirror_not_dict": "Simple Mirror index.json is not a JSON object (dictionary).",
    "pkg_update_success": "‚úÖ Repository updated. {count} packages available.",
    "pkg_update_error": "‚ùå Error updating repo from {url}: {e}",
    "pkg_fallback_default": "‚ö†Ô∏è Attempting fallback to default repository...",
    "pkg_fallback_success": "‚úÖ Default repository loaded successfully. {count} packages available.",
    "pkg_fallback_fail": "‚ùå Failed to fetch from default repo (HTTP {code}).",
    "pkg_fallback_fatal": "‚ùå Fatal Error: Default repo also failed: {e}",
    "pkg_command_parse_info_1": "   (Info: Detected '**default**', converting to '__default__')",
    "pkg_command_parse_info_2": "   (Info: Detected 'default', converting to '__default__')",
    "pkg_fetch_mode_github": "   (Fetching mode: GitHub API)",
    "pkg_fetch_http_error": "Failed to fetch package data (HTTP {code}).",
    "pkg_fetch_not_base64": "Error: File encoding is not base64.",
    "pkg_fetch_applying_fix": "   (Applying backslash fix for GitHub content...)",
    "pkg_fetch_mode_mirror": "   (Fetching mode: Simple Mirror)",
    "pkg_fetch_parse_error": "Error parsing package data: {e}",
    "pkg_fetch_process_error": "Error processing package data: {e}",
    "pkg_not_in_cache": "‚ö†Ô∏è Package '{name}' not found in cache. Try 'pkg update' first.",
    "pkg_getting_info": "Getting package info for '{name}'...",
    "pkg_detail_title": "--- Package Details ---",
    "pkg_detail_name": "Name    : {name}",
    "pkg_detail_version": "Version : {version}",
    "pkg_detail_author": "Author  : {author}",
    "pkg_detail_desc": "Desc    : {desc}",
    "pkg_detail_footer": "--------------------",
    "pkg_confirm_install": "Continue installation? [Y/n] ",
    "pkg_install_cancelled": "Installation cancelled.",
    "pkg_installing": "Installing '{name}'",
    "pkg_install_success": "‚úÖ Successfully installed '{name}' v{version}!",
    "pkg_not_installed": "‚ùå Package '{name}' not found in installed list.",
    "pkg_confirm_remove": "Are you sure you want to remove '{name}'?\nContinue? [Y/n] ",
    "pkg_remove_cancelled": "Removal cancelled.",
    "pkg_remove_success": "üóëÔ∏è Removed package '{name}'.",
    "pkg_list_empty": "No packages installed yet.",
    "pkg_list_title": "Installed Packages:",
    "pkg_list_item": " - {name} v{version} | commands: {commands}",
    "pkg_upgrade_checking": "‚¨ÜÔ∏è Checking for package upgrades...",
    "pkg_upgrade_fail_update": "‚ö†Ô∏è Failed to update repo, upgrade process cancelled.",
    "pkg_upgrade_empty": "No installed packages to upgrade.",
    "pkg_upgrade_check_installed": "--- Checking installed packages ---",
    "pkg_upgrade_not_in_repo": "‚ö†Ô∏è '{name}' is no longer in the repo. Skipping.",
    "pkg_upgrade_error_process": "‚ùå Error processing package '{name}'. Skipping.",
    "pkg_upgrade_no_version": "‚ö†Ô∏è Package '{name}' in repo has no version. Skipping.",
    "pkg_upgrading_from": "üì¶ Upgrading '{name}' from {current_ver} ‚Üí {new_ver}",
    "pkg_up_to_date": "‚úÖ '{name}' (v{current_ver}) is already up to date. (Repo version: {new_ver})",
    "pkg_upgrade_error_skip": "‚ùå Error processing '{name}': {e}. Skipping.",
    "pkg_upgrade_complete": "üéâ Upgrade complete!",
    "pkg_upgrade_summary": "Upgraded: {upgraded_count}, Up-to-date: {uptodate_count}",
    "pkg_search_empty_cache": "Repo cache is empty. Run 'pkg update' first.",
    "pkg_searching": "Searching for '{keyword}' in repo...",
    "pkg_search_item": " - {name}",
    "pkg_search_not_found": "No packages found.",
    "cmd_usage": "Usage: trm run <command> [subcommand]",
    "cmd_cache_empty": "‚ö†Ô∏è Internal cache empty, reloading from disk...",
    "cmd_no_default": "‚ùå Package '{package_name}' has no default command ('__default__' or 'default').",
    "cmd_subcommand_not_found_default": "Subcommand '{sub_command}' not found. Running default:",
    "cmd_subcommand_not_found_no_default": "‚ùå Package '{package_name}' has no subcommand '{sub_command}' or default command.",
    "cmd_running": "üîπ Running '{package_name} {display_subcommand}'...",
    "cmd_multiline_fallback": "   (Info: Detected multiline string, trying fallback...)",
    "cmd_error_fallback": "Error executing (escaped fallback): {e}",
    "cmd_error_syntax": "Error executing command (SyntaxError): {e}",
    "cmd_error_generic": "Error executing command: {e}",
    "cmd_not_found": "‚ùå Command '{package_name}' not found in installed packages."
}
